{"version":3,"sources":["../../../app/auth/index.js"],"names":["passport","require","config","logger","FacebookStrategy","Strategy","GoogleStrategy","TwitterStrategy","h","module","exports","serializeUser","user","done","id","deserializeUser","findById","then","catch","log","error","authProcessor","accessToken","refreshToken","profile","findOne","result","createNewUser","newChatUser","use","fb","google","twitter"],"mappings":";;AAAA,IAAMA,WAAWC,QAAQ,UAAR,CAAjB;AACA,IAAMC,SAASD,QAAQ,WAAR,CAAf;AACA,IAAME,SAASF,QAAQ,WAAR,CAAf;AACA,IAAMG,mBAAmBH,QAAQ,mBAAR,EAA6BI,QAAtD;AACA,IAAMC,iBAAiBL,QAAQ,yBAAR,EAAmCI,QAA1D;AACA,IAAME,kBAAkBN,QAAQ,kBAAR,EAA4BI,QAApD;AACA,IAAMG,IAAIP,QAAQ,YAAR,CAAV;;AAEAQ,OAAOC,OAAP,GAAiB,YAAM;AACnBV,aAASW,aAAT,CAAuB,UAACC,IAAD,EAAOC,IAAP,EAAgB;AACnCA,aAAK,IAAL,EAAWD,KAAKE,EAAhB;AACH,KAFD;;AAIAd,aAASe,eAAT,CAAyB,UAACD,EAAD,EAAKD,IAAL,EAAc;AACnCL,UAAEQ,QAAF,CAAWF,EAAX,EACKG,IADL,CACU;AAAA,mBAAQJ,KAAK,IAAL,EAAWD,IAAX,CAAR;AAAA,SADV,EAEKM,KAFL,CAEW;AAAA,mBAASf,OAAOgB,GAAP,CAAW,OAAX,EAAoB,mBAAmBC,KAAvC,CAAT;AAAA,SAFX;AAGH,KAJD;;AAMA,QAAIC,gBAAgB,SAAhBA,aAAgB,CAACC,WAAD,EAAcC,YAAd,EAA4BC,OAA5B,EAAqCX,IAArC,EAA8C;AAC9DL,UAAEiB,OAAF,CAAUD,QAAQV,EAAlB,EACKG,IADL,CACU,UAACS,MAAD,EAAY;AACd,gBAAIA,MAAJ,EAAY;AACRb,qBAAK,IAAL,EAAWa,MAAX;AACH,aAFD,MAEO;AACH;AACAlB,kBAAEmB,aAAF,CAAgBH,OAAhB,EACKP,IADL,CACU;AAAA,2BAAeJ,KAAK,IAAL,EAAWe,WAAX,CAAf;AAAA,iBADV,EAEKV,KAFL,CAEW;AAAA,2BAASf,OAAOgB,GAAP,CAAW,OAAX,EAAoB,iCAAiCC,KAArD,CAAT;AAAA,iBAFX;AAGH;AACJ,SAVL;AAWH,KAZD;AAaApB,aAAS6B,GAAT,CAAa,IAAIzB,gBAAJ,CAAqBF,OAAO4B,EAA5B,EAAgCT,aAAhC,CAAb;AACArB,aAAS6B,GAAT,CAAa,IAAIvB,cAAJ,CAAmBJ,OAAO6B,MAA1B,EAAkCV,aAAlC,CAAb;AACArB,aAAS6B,GAAT,CAAa,IAAItB,eAAJ,CAAoBL,OAAO8B,OAA3B,EAAoCX,aAApC,CAAb;AACH,CA3BD","file":"index.js","sourcesContent":["const passport = require(\"passport\");\r\nconst config = require(\"../config\");\r\nconst logger = require(\"../logger\");\r\nconst FacebookStrategy = require(\"passport-facebook\").Strategy;\r\nconst GoogleStrategy = require('passport-google-oauth20').Strategy;\r\nconst TwitterStrategy = require('passport-twitter').Strategy;\r\nconst h = require('../helpers');\r\n\r\nmodule.exports = () => {\r\n    passport.serializeUser((user, done) => {\r\n        done(null, user.id);\r\n    });\r\n\r\n    passport.deserializeUser((id, done) => {\r\n        h.findById(id)\r\n            .then(user => done(null, user))\r\n            .catch(error => logger.log(\"error\", \"User not found\" + error));\r\n    });\r\n\r\n    let authProcessor = (accessToken, refreshToken, profile, done) => {\r\n        h.findOne(profile.id)\r\n            .then((result) => {\r\n                if (result) {\r\n                    done(null, result);\r\n                } else {\r\n                    // create new user and return\r\n                    h.createNewUser(profile)\r\n                        .then(newChatUser => done(null, newChatUser))\r\n                        .catch(error => logger.log(\"error\", \"Error when creating new user\" + error));\r\n                }\r\n            });\r\n    };\r\n    passport.use(new FacebookStrategy(config.fb, authProcessor));\r\n    passport.use(new GoogleStrategy(config.google, authProcessor));\r\n    passport.use(new TwitterStrategy(config.twitter, authProcessor));\r\n};"]}