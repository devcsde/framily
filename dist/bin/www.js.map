{"version":3,"sources":["../../bin/www"],"names":["app","require","http","socketIO","redis","createClient","adapter","config","logger","port","normalizePort","process","env","PORT","set","server","createServer","io","pubClient","host","auth_pass","password","subClient","return_buffers","use","socket","next","request","listen","on","onError","onListening","val","parseInt","isNaN","error","syscall","bind","code","log","exit","addr","address"],"mappings":"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","file":"www.js","sourcesContent":["\n\n/**\n * Module dependencies.\n */\n\nconst app = require('../index');\nconst http = require(\"http\");\nconst socketIO = require(\"socket.io\");\nconst redis = require(\"redis\").createClient;\nconst adapter = require(\"socket.io-redis\");\nconst config = require('../app/config');\nconst logger = require(\"../app/logger\");\n\nrequire(\"../app/socket\");\n\n/**\n * Get port from environment and store in Express.\n */\n\nlet port = normalizePort(process.env.PORT || '3000');\napp.set('port', port);\n\n/**\n * Create socket.io server.\n */\nlet server = http.createServer(app);\nlet io = socketIO(server);\n// implement redis\nio.set(\"transports\", [\"websocket\"]);\nlet pubClient = redis(config.redis.port, config.redis.host, {\n    auth_pass: config.redis.password\n});\nlet subClient = redis(config.redis.port, config.redis.host, {\n  return_buffers: true,\n  auth_pass: config.redis.password\n});\nio.adapter(adapter({\n    pubClient,\n    subClient\n}));\n\nio.use((socket, next) => {\n  require(\"../app/session\")(socket.request, {}, next);\n});\nrequire(\"../app/socket\")(io, app);\n\n/**\n * Listen on provided port, on all network interfaces.\n */\n\nserver.listen(port);\nserver.on('error', onError);\nserver.on('listening', onListening);\n\n/**\n * Normalize a port into a number, string, or false.\n */\n\nfunction normalizePort(val) {\n  let port = parseInt(val, 10);\n\n  if (isNaN(port)) {\n    // named pipe\n    return val;\n  }\n\n  if (port >= 0) {\n    // port number\n    return port;\n  }\n\n  return false;\n}\n\n/**\n * Event listener for HTTP server \"error\" event.\n */\n\nfunction onError(error) {\n  if (error.syscall !== 'listen') {\n    throw error;\n  }\n\n  let bind = typeof port === 'string'\n    ? 'Pipe ' + port\n    : 'Port ' + port;\n\n  // handle specific listen errors with friendly messages\n  switch (error.code) {\n    case 'EACCES':\n      // console.error(bind + ' requires elevated privileges');\n      logger.log(\"error\", bind + ' requires elevated privileges');\n      process.exit(1);\n      break;\n    case 'EADDRINUSE':\n      // console.error(bind + ' is already in use');\n      logger.log(\"error\", bind + ' is already in use');\n      process.exit(1);\n      break;\n    default:\n      throw error;\n  }\n}\n\n/**\n * Event listener for HTTP server \"listening\" event.\n */\n\nfunction onListening() {\n  let addr = server.address();\n  let bind = typeof addr === 'string'\n    ? 'pipe ' + addr\n    : 'port ' + addr.port;\n  logger.log(\"debug\", 'Listening on ' + bind );\n}\n"]}